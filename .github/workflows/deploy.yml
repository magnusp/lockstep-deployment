name: Deploy

on:
  repository_dispatch:
    types: [version_tag_created]
  workflow_dispatch:
    inputs:
        tag:
          description: 'Tag to deploy'
          required: true

permissions:
  contents: read
  #checks: write # JUnit reports
  #pull-requests: write # JUnit reports
  #packages: write
  #actions: write
  #attestations: write # Required for the Docker build-push-action to work
  #id-token: write # Required for the Docker build-push-action to work

env:
  REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  MAVEN_ARGS: "--batch-mode --no-transfer-progress"

jobs:
  extract-version-tag:
    runs-on: "${{ vars.DEFAULT_RUNNER }}"
    outputs:
      deploy_tag: ${{ steps.determine_tag.outputs.deploy_tag }}
    steps:
      - name: Determine Deployment Tag
        id: determine_tag
        run: |
          # 1. Check if the event is workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"

          # 2. Check if the event is repository_dispatch
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then

            # Extract the client_payload string safely
            PAYLOAD_JSON='${{ toJSON(github.event.client_payload) }}'

            # Use jq to parse the 'tag' property from the JSON string.
            # We use 'jq -r' to get the raw string value.
            TAG=$(echo "$PAYLOAD_JSON" | jq -r '.tag')

            # Fallback if jq parsing fails or the 'tag' is empty
            if [ -z "$TAG" ] || [ "$TAG" == "null" ]; then
              echo "::warning::repository_dispatch payload missing 'tag'. Falling back to 'latest'."
              TAG="latest"
            fi

          # 3. Default (if triggered by push, pull_request, etc., but only if they are enabled)
          else
            echo "::error::Event '${{ github.event_name }}' not explicitly handled."
            exit 1
          fi

          # Output the determined tag as a workflow environment variable
          echo "Setting deploy_tag=${TAG}"
          echo "deploy_tag=$TAG" >> $GITHUB_OUTPUT

  deploy-dev:
    name: Deploy to development environment
    needs: extract-version-tag
    runs-on: "${{ vars.DEFAULT_RUNNER }}"
    steps:
      - uses: actions/checkout@v4
      - name: Call deploy
        uses: ./.github/actions/deploy-action
        with:
          environment: production
          block_message: false
          tag: ${{ needs.extract-version-tag.outputs.deploy_tag }}
